// Code generated by `ggen -ent Groups -item Group -conf -coll -mods Select,Expand,Filter,Top,Skip,OrderBy -helpers Data,Normalized,Pagination`; DO NOT EDIT.

package api

import (
	"fmt"
)

// Conf receives custom request config definition, e.g. custom headers, custom OData mod
func (groups *Groups) Conf(config *RequestConfig) *Groups {
	groups.config = config
	return groups
}

// Select adds $select OData modifier
func (groups *Groups) Select(oDataSelect string) *Groups {
	groups.modifiers.AddSelect(oDataSelect)
	return groups
}

// Expand adds $expand OData modifier
func (groups *Groups) Expand(oDataExpand string) *Groups {
	groups.modifiers.AddExpand(oDataExpand)
	return groups
}

// Filter adds $filter OData modifier
func (groups *Groups) Filter(oDataFilter string) *Groups {
	groups.modifiers.AddFilter(oDataFilter)
	return groups
}

// Top adds $top OData modifier
func (groups *Groups) Top(oDataTop int) *Groups {
	groups.modifiers.AddTop(oDataTop)
	return groups
}

// Skip adds $skiptoken OData modifier
func (groups *Groups) Skip(skipToken string) *Groups {
	groups.modifiers.AddSkip(skipToken)
	return groups
}

// OrderBy adds $orderby OData modifier
func (groups *Groups) OrderBy(oDataOrderBy string, ascending bool) *Groups {
	groups.modifiers.AddOrderBy(oDataOrderBy, ascending)
	return groups
}

/* Response helpers */

// Data response helper
func (groupsResp *GroupsResp) Data() []GroupResp {
	collection, _ := normalizeODataCollection(*groupsResp)
	groups := []GroupResp{}
	for _, item := range collection {
		groups = append(groups, GroupResp(item))
	}
	return groups
}

// Normalized returns normalized body
func (groupsResp *GroupsResp) Normalized() []byte {
	normalized, _ := NormalizeODataCollection(*groupsResp)
	return normalized
}

/* Pagination helpers */

// GroupsPage - paged items
type GroupsPage struct {
	Items       GroupsResp
	HasNextPage func() bool
	GetNextPage func() (*GroupsPage, error)
}

// GetPaged gets Paged Items collection
func (groups *Groups) GetPaged() (*GroupsPage, error) {
	data, err := groups.Get()
	if err != nil {
		return nil, err
	}
	res := &GroupsPage{
		Items: data,
		HasNextPage: func() bool {
			return data.HasNextPage()
		},
		GetNextPage: func() (*GroupsPage, error) {
			nextURL := data.NextPageURL()
			if nextURL == "" {
				return nil, fmt.Errorf("unable to get next page")
			}
			return NewGroups(groups.client, nextURL, groups.config).GetPaged()
		},
	}
	return res, nil
}

// NextPageURL gets next page OData collection
func (groupsResp *GroupsResp) NextPageURL() string {
	return getODataCollectionNextPageURL(*groupsResp)
}

// HasNextPage returns is true if next page exists
func (groupsResp *GroupsResp) HasNextPage() bool {
	return groupsResp.NextPageURL() != ""
}
