// Code generated by `ggen -ent Folders -item Folder -conf -coll -mods Select,Expand,Filter,Top,Skip,OrderBy -helpers Data,Normalized,Pagination`; DO NOT EDIT.

package api

import (
	"fmt"
)

// Conf receives custom request config definition, e.g. custom headers, custom OData mod
func (folders *Folders) Conf(config *RequestConfig) *Folders {
	folders.config = config
	return folders
}

// Select adds $select OData modifier
func (folders *Folders) Select(oDataSelect string) *Folders {
	folders.modifiers.AddSelect(oDataSelect)
	return folders
}

// Expand adds $expand OData modifier
func (folders *Folders) Expand(oDataExpand string) *Folders {
	folders.modifiers.AddExpand(oDataExpand)
	return folders
}

// Filter adds $filter OData modifier
func (folders *Folders) Filter(oDataFilter string) *Folders {
	folders.modifiers.AddFilter(oDataFilter)
	return folders
}

// Top adds $top OData modifier
func (folders *Folders) Top(oDataTop int) *Folders {
	folders.modifiers.AddTop(oDataTop)
	return folders
}

// Skip adds $skiptoken OData modifier
func (folders *Folders) Skip(skipToken string) *Folders {
	folders.modifiers.AddSkip(skipToken)
	return folders
}

// OrderBy adds $orderby OData modifier
func (folders *Folders) OrderBy(oDataOrderBy string, ascending bool) *Folders {
	folders.modifiers.AddOrderBy(oDataOrderBy, ascending)
	return folders
}

/* Response helpers */

// Data response helper
func (foldersResp *FoldersResp) Data() []FolderResp {
	collection, _ := normalizeODataCollection(*foldersResp)
	folders := []FolderResp{}
	for _, item := range collection {
		folders = append(folders, FolderResp(item))
	}
	return folders
}

// Normalized returns normalized body
func (foldersResp *FoldersResp) Normalized() []byte {
	normalized, _ := NormalizeODataCollection(*foldersResp)
	return normalized
}

/* Pagination helpers */

// FoldersPage - paged items
type FoldersPage struct {
	Items       FoldersResp
	HasNextPage func() bool
	GetNextPage func() (*FoldersPage, error)
}

// GetPaged gets Paged Items collection
func (folders *Folders) GetPaged() (*FoldersPage, error) {
	data, err := folders.Get()
	if err != nil {
		return nil, err
	}
	res := &FoldersPage{
		Items: data,
		HasNextPage: func() bool {
			return data.HasNextPage()
		},
		GetNextPage: func() (*FoldersPage, error) {
			nextURL := data.NextPageURL()
			if nextURL == "" {
				return nil, fmt.Errorf("unable to get next page")
			}
			return NewFolders(folders.client, nextURL, folders.config).GetPaged()
		},
	}
	return res, nil
}

// NextPageURL gets next page OData collection
func (foldersResp *FoldersResp) NextPageURL() string {
	return getODataCollectionNextPageURL(*foldersResp)
}

// HasNextPage returns is true if next page exists
func (foldersResp *FoldersResp) HasNextPage() bool {
	return foldersResp.NextPageURL() != ""
}
