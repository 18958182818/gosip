trigger:
  - master
  - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.13' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
  GO111MODULE: 'on'
  SPAUTH_CI: 'true'

steps:
  - script: |
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      shopt -s extglob
      shopt -s dotglob
      mv !(gopath) '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    displayName: 'Set up the Go workspace'

  - script: |
      go version
      go get ./...
    workingDirectory: '$(modulePath)'
    displayName: 'Get dependencies'

  - script: |
      go test ./auth/... -race -coverprofile=auth_coverage.out -covermode=atomic
    workingDirectory: '$(modulePath)'
    displayName: 'Run auth tests'
    env:
      SPAUTH_SITEURL: $(ci.spo.siteurl)
      SPAUTH_USERNAME: $(ci.spo.username)
      SPAUTH_PASSWORD: $(ci.spo.password)
      SPAUTH_CLIENTID: $(ci.spo.clientid)
      SPAUTH_CLIENTSECRET: $(ci.spo.clientsecret)

  - script: |
      go test ./ -v -count=1 -coverprofile=gosip_coverage.out -covermode=atomic && \
      go test ./cpass/... -v -race -count=1 -coverprofile=cpass_coverage.out -covermode=atomic && \
      go test ./csom/... -v -race -count=1 -coverprofile=csom_coverage.out -covermode=atomic
    workingDirectory: '$(modulePath)'
    displayName: 'Run util tests'

  - script: |
      go test ./api/... -v -race -count=1 -coverprofile=api_coverage.out -covermode=atomic
    workingDirectory: '$(modulePath)'
    displayName: 'Run API tests'
    env:
      SPAUTH_ENVCODE: spo
      SPAPI_HEAVY_TESTS: true
      GOMAXPROCS: 10
      ENV_SPO_SITEURL: $(ci.spo.siteurl)
      ENV_SPO_USERNAME: $(ci.spo.username)
      ENV_SPO_PASSWORD: $(ci.spo.password)

  - script: |
      bash ./test/scripts/cover-merge.sh
      bash <(curl -s https://codecov.io/bash)
    workingDirectory: '$(modulePath)'
    displayName: 'Publish code coverage'
    env:
      CODECOV_TOKEN: $(ci.codecov.token)
